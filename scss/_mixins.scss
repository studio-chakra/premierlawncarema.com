//
// Mixins
// --------------------------------------------------

@mixin vertical-align {
  display: inline-block;
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}


@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
}


@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}


@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }
 
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}


@function get-font-weight($weight, $font) {
  @if $font == "magneta" {
    @if map-has-key($ff-magneta-weights, $weight) {
      @return map-get($ff-magneta-weights, $weight);
    } 
  } @elseif $font == "akagi" {
    @if map-has-key($ff-akagi-weights, $weight) {
      @return map-get($ff-akagi-weights, $weight);
    } 
  }
  @warn "Unknown `#{$weight}` in $weights.";
  @return null;
}


@mixin font-style ($family, $weight: null, $style: null, $color: null, $transform: null) {
  @if $family {
    @if $family == "magneta" {
      font-family: $font-magneta;
    } @elseif $family == "akagi" {
      font-family: $font-akagi;
    }
  }  
  @if $weight {
    font-weight: get-font-weight($weight, $family);
  }
  @if $style {
    font-style: $style;
  }
  @if $color {
    color: $color;
  }
  @if $transform {
    text-transform: $transform;
  }
}

@mixin font-weight ($family, $weight) {
  font-weight: get-font-weight($weight, $family);
}






// Created by Max Luster (@maxluster)
// Usage instructions at https://bugsnag.com/blog/responsive-typography-with-chained-media-queries
// Requires SASS >= 3.3
// Enhanced by Breakpoint 2.4.x and Compass 1.0 (alpha)
// For SASS 3.2.x support, use https://gist.github.com/maxluster/c9ecc6e4a6770e507c2c
 
// Provides a simplified syntax for chaining media queries across named or numeric breakpoints
@mixin responsive($properties, $default-value, $responsive-values){
 
  // No named breakpoints by default
  $named-breakpoints: () !default;
 
  // Apply default property values
  @each $property in $properties{
    #{$property}: #{$default-value};
  }
  
  @each $breakpoint, $value in $responsive-values{
 
    // Get named breakpoint values
    @if type-of($breakpoint) == string{
      @if(map-has-key($named-breakpoints, $breakpoint)){
        $breakpoint: map-get($named-breakpoints, $breakpoint);
      }
      @else{
        @warn "Couldn't find named breakpoint: " + $breakpoint;
      }
    }
 
    // Use Breakpoint if it exists
    @if mixin-exists("breakpoint"){
      // Apply at breakpoint
      @include breakpoint($breakpoint) {
        @each $property in $properties{
          #{$property}: #{$value};
        }
      }
    }
    // Fallback to min-width media queries
    @else{
      @media screen and (min-width: $breakpoint) {
        @each $property in $properties{
          #{$property}: #{$value};
        }
      }
    }
 
  }
 
}
 
// Extras!
 
// Use $named-breakpoints with block-style media queries
@mixin named-breakpoint($breakpoint){
 
  @if type-of($breakpoint) == string{
    @if(map-has-key($named-breakpoints, $breakpoint)){
      $breakpoint: map-get($named-breakpoints, $breakpoint);
      @if mixin-exists("breakpoint"){
        @include breakpoint($breakpoint){
          @content;
        }
      }
      @else{
        @media screen and (min-width: $breakpoint) {
          @content;
        }
      }
    }
    @else{
      @warn "Couldn't find named breakpoint: " + $breakpoint;
    }
  }
 
}
 
// Create a scope for a local set of named breakpoints
@mixin with-named-breakpoints($context-breakpoints){
  $old: $named-breakpoints;
  $named-breakpoints:  map-merge($named-breakpoints, $context-breakpoints) !global;
  @content;
  $named-breakpoints: $old !global;
}
